@page "/cashinflow"
@using ET.Models
@inject ET.Services.TransactionService TransactionService
@inject ET.Services.UserService UserService
@inject IJSRuntime JSRuntime

<h1>Cash In Flows</h1>

@if (cashInflows == null)
{
        <p>Loading...</p>
}
else
{
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>User Name</th>
                    <th>Amount</th>
                    <th>Date</th>
                    <th>Source</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var cashInFlow in cashInflows)
            {
                        <tr>
                            <td>@cashInFlow.Id</td>
                            <td>@users.FirstOrDefault(u => u.Id == cashInFlow.UserId)?.Name</td>
                            <td>@cashInFlow.Amount</td>
                            <td>@cashInFlow.Date.ToString("MM/dd/yyyy")</td>
                            <td>@cashInFlow.Category</td>
                            <td>@cashInFlow.Description</td>
                        </tr>
            }
            </tbody>
        </table>
}

<h2>Add New Cash In Flow</h2>
<EditForm Model="newCashInFlow" OnValidSubmit="HandleCashInFlowSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="userId">User</label>
        <select id="userId" @bind="newCashInFlow.UserId" class="form-control" required>
            <option value="" disabled>Select a User</option>
            @foreach (var user in users)
            {
                    <option value="@user.Id">@user.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="amount">Amount</label>
        <InputNumber id="amount" @bind-Value="newCashInFlow.Amount" class="form-control" required />
    </div>

    <div class="form-group">
        <label for="source">Source</label>
        <InputText id="source" @bind-Value="newCashInFlow.Category" class="form-control" required />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="newCashInFlow.Description" class="form-control" />
    </div>

    <div class="form-group">
        <label for="date">Date</label>
        <InputDate id="date" @bind-Value="newCashInFlow.Date" class="form-control" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Add Cash In Flow</button>
    </div>
</EditForm>

@code {
    private List<CashFlow> cashInflows;
    private CashFlow newCashInFlow = new CashFlow { IsInflow = true, Date = DateTime.Now };
    private List<User> users;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cashInflows = await TransactionService.GetCashInflowsAsync();
            users = UserService.GetAllUsers();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading cash inflows: {ex.Message}");
        }
    }

    private async Task HandleCashInFlowSubmit()
    {
        try
        {
            await TransactionService.AddCashInflowAsync(newCashInFlow);

            // Reset form
            newCashInFlow = new CashFlow { IsInflow = true, Date = DateTime.Now };

            // Refresh cash inflows
            cashInflows = await TransactionService.GetCashInflowsAsync();

            // Show alert message
            await JSRuntime.InvokeVoidAsync("alert", "Balance Added");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error adding cash inflow: {ex.Message}");
        }
    }
}